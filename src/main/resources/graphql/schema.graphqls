type Query {
    getAvailableKeys: [GuitarKey]
    getAvailableModes: [FretBoardMode]
    getFretBoardConfig: FretBoardConfig
    getGuitarPositions: [GuitarPosition]
    getChords: [Chord]
    getFretBoardLabels: [FretBoardLabel]
    getLastKeyPressed: String
}

type Mutation {
    updateFretBoardMode(mode: String!): FretBoardConfig
    updateGuitarKey(key: String!): FretBoardConfig
}

type Subscription {
    fretBoardConfig: FretBoardConfig
    guitarPositions: [GuitarPosition]
    chords: [Chord]
    fretBoardLabels: [FretBoardLabel]
    keyPressed: String
}

type GuitarKey {
    key: String!
    label: String!
}

type FretBoardMode {
    mode: String!
    label: String!
}

type FretBoardConfig {
    key: String!
    mode: String!
}

type GuitarPosition {
    stringIndex: Int!
    fretIndex: Int!
    active: Boolean!
    bend: Boolean!
}

type Chord {
    label: String!
}

type FretBoardLabel {
    stringIndex: Int!
    fretIndex: Int!
    label: String!
}